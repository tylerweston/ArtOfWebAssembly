
Chapter 2:

Wat Variables:

Four different data types in WebAssembly:
i32, i64, f32, and f64. i is Integer, f is floating point, plus the bits used.

Strings and other more complex data types need to be managed directly in linear memory.

We can import global variables that have been declared in JS into our WASM modules.
Note that JS does not support 64-bit integers, so it is difficult to pass 64-bit integers from WASM to JS.
JS treats all numbers as 64-bit floating point numbers.

As a stack machine, we can visualize it like this:
i32.const 3     ;; stack = [3]
i32.const 2     ;; stack = [2, 3]
i32.add         ;; 2 and 3 popped from stack, added, 5 pushed to stack, stack = [5]

i32.const 9     ;; stack = [9, 5]
i32.const 7     ;; stack = [7, 9, 5]
i32.sub         ;; 7, 9 popped off stack, 9 - 7 pushed onto stack, stack = [2, 5]

i32.mul         ;; 2, 5 popped off stack, 2*5 pushed onto stack, stack = [10]

You can also use indices to keep track of local variables instead of names, something like: local.get 0

Operands must be the same, so we need to cast different types of variables, some examples:

i32.trunc_s/f64         ;; convert a 64-bit float to a 32-bit signed integers
i32.reinterpret/f32     ;; keep the bits the same but treat a 32-bit float as a 32-bit integers
i32.wrap/i64            ;; put the 32 bits of an integer into the lower 64 bits
f32.demote/f64      
f64.promote/f32
i64.trunc_u/f64
etc.

WAT contains some higher level control flow statements like if and else.
If evaluates any non-zero value to be true.

Boolean operators use i32 and return 1 for true and 0 for false.
If you wanted to do something like 'if (x > y && y < 6)' the code would be:

(if
    (i32.and
        (i32.gt_s (local.get $x) (local.get $y))
        (i32.lt_s (local.get $y) (i32.const 6))
    )
    (then
        nop ;;... code goes here
    )
)

For integers, remember to use _s for signed numbers. For floating point, there is no need
since they are all signed.

the Block statement:
Block is used in place of goto, code inside a block can only jump to the end of the block.
ie.
(block $jump_to_end
    br $jump_to_end
    nop     ;; this code doesn't execute
)
nop ;; this is where br jumps to

br_if is used as a conditional branch depending on the top item of the stack.

If you need to jump to the beginning of a block, use a loop:

(loop $not_gonna_loop
    nop
)
;; That doesn't actually loop though! You have to jump manually!

(loop $infinite_loop
    br $infinite_loop
)
;; That loops forever!

You can use branch tables as a kind of switch statement but since you can only break out of a block 
your code is currently in, you have to nest all your blocks and declare them one after another:

(block $block_0
(block $block_1
(block $block_2
(block $block_3
(block $block_4
(block $block_5
(br_table $block_0 $block_1 $block_2 $block_3 $block_4 $block_5 
    (local.get $val)
)
)   ;;block 5
i32.const 5
return

)   ;;block 4
i32.const 4
return

)   ;;block 3
i32.const 3
return

)   ;;block 2
i32.const 2
return

)   ;;block 1
i32.const 1
return

)   ;;block 0
i32.const 0
return

NOTE that in chrome, this isn't any faster than just using if statements and on FireFox was only 
noticably faster with dozen+ branches. And it certainly lacks readability!

Chapter 3:

A WebAssembly module interacts with the embedding environment via imported and exported functions. 
You can write functions wihtin your module that can be called from the embedding environment.
It is faster to call a function defined within a WASM module than one defined in JS, from within the module.

So far, all functions have used (export) so they can be called with JS, but not all functions should be exported.
Small functions that don't do a lot of work will incur too much overhead, should be written in JS.
The WAT functions that are most useful to export are those that loop over and process lots of data.
Best to start off a WAT with lots of functions, that as you optimize, inline functions that are called often to
remove overhead of branching.

Accessing the stack from a function:
Each function can only pop off values it added to the stack! (Has a sort of frame then?) You must pass in variables
as parameters you want to use in your function!

Importing functions from JS:
(import "env" "print_string" (func $print_strin (param i32)))
Import a function called "print_string" passed in through the env object, which takes one integer parameter.
Only numbers can be passed as parameters to JS functions.

Faster to call functions directly, as opposed to through the function table, and faster to wall WASM functions
to avoid overhead of back and forth between JS and WASM.
js_table_test time=71
js_import_test=73
wasm_table_test=30
wasm_import_test=21

Data Types:
i32 (32-bit integer)
Can be unsigned and represent values from 0 to 4,294,967,295 or signed and represent numbers between -2,147,483,648
and 2,147,483,647. 
Negative number is stored in 2s complement, that is, xor (flip) the bits and add 1.

i64 can store a REALLY big range of numbers! in i64, you don't need to specify signed or unsigned for some ops.
such as i64.add, but some operations like division needs to be specified, like i64.div_s vs i64.div_u.
Right now, JS does not support i64 natively, but eventually BigInt should be usable for this.

f32:
1 sign bit
8 exponent bits (Biased)
23 bits mantissa

There are some special values as well, 0, -0 are all 0s (Except for sign bit)
All exponent bits set to 1 and mantissa bits set to 0 is + or - infinity
If that mantissa bits aren't set to 0, it is NaN (Not a number).

f64 uses 52 bit for significant digits, and an 11 bit exponent and a sign bit. Precise, but usually slower.

Bit shifting:
Left-shifting is sign-independent. It is the same thing as multipling by 2.
Right-shifting requires a signed or unsigned shift operation. 

Rotl and rotr are bit rotation, so they flip a bit back around to the other side.

Masking with and/or:
i32.and or i32.or, 1 for true and 0 for false. 
Use 0s in a bitmask to clear bits using AND.
use 1s in a bitmask to set bits using OR.

XOR is used to flip bits. Xoring with 0 will NOT flip a bit, Xoring with 1 WILL flip a bit.

String in WASM:
WASM doesn't have a built in string type. When working with strings in WASM, you need to know
what format you're using, ASCII with 7 bits + 1 extra, or Unicode Transformation Format,
which comes in 7-, 8-, 16-, and 32-bit varieties. 
To copy string, we could copy byte for byte, but this will be less optimal than copying larger chunks.
We can copy i64s (8 bytes at a time), but then if we aren't in multiples of 8, we'll also need to copy
some individual bytes.

Linear Memory:
A really good use case for WASM is processing lots of data. It can perform math faster than JS so if we
can bundle a bunch of numbers together and pass them off to WASM, DO IT. We can use linear memory to load
large amounts of data in JS and then process it within a WASM module.

Linear memory is similar to a heap, think of it as one long array we can access between JS and WASM.
Linear memory, it is the programmers responsibility to keep track of what is in memory and where it is.
Once a page is allocated, it cannot be deallocated! 

A page is the smallest chunk of data that can be allocated for a WASM module. A page is 64kb in size.
Maximum number of pages an app can allocate is 32, 767, or 2GB. NOTE: This may be outdated, since the 
WASM community group is trying to increase amount of allocatable pages to 65,535.
To declare memory in a module, use (memory 1) (or however many pages you want). We need to (export) the
memory from WASM if we declare it in WASM and want to access it in JS.
We can also declare it in JS:
const memory = new WebAssembly.Memory({initial: 1})
and then pass it into our WASM module when we instantiate it, then in WASM:
(import "js" "mem" (memory 1))

Note that, unlike C, there isn't a distinct pointer type in WASM, we use an i32 that is an index into the 
linear memory array.

When we work with linear memory inside our WASM module, we need to understnd the data structure at a low level.
When we want an array of data structures, we need to kno the starting address (base address), stride (size of each
structure), and the offset of any attributes (how far into the struct we can find any single attribute).

The DOM:
An HTML page is, at it's core, a document. The DOM was designed as a language-independent interface for manipulating
HTML and XML documents. Because HTML is a tree structure, the DOM represents a document as a logical tree.
The DOM is how JS and other languages manipulate HTML.
Since it is usually best to focus the WASM portions of a web app on data processing, DOM manipulation is usually best
left to the JS portion of the app.

Profiling / Optimization
Use the browser in incognito mode when profiling, since it won't load website caches, cookies, or Chrome plug-ins.
Open the site, then choose More Tools > Developer tools and click the performance tab.
Make sure memory is selected at the top to profile heap memory. Record for about 5 seconds. If you are concerned
about the startup time, profile from a reload.

wasm-opt
WASM can be optimized for download size or execution time:
Download size:
wasm-opt infile.wasm -Oz -o outfile.wasm
-Os will be a bit more balanced for execution time
Optimizing for execution time:
wasm-opt infile.wasm -O3 -o outfile.wasm

To view bytecode:
node --print-bytecode --print-bytecode-filter=function_to_view_bytecode_for infile.js

AssemblyScript:
run
asc -h
to see a list of AssemblyScript compiler command line options
-O is an optimization flag

WASM modules that AssemblyScript generates always create and export their own memory unless you
use the --import-Memory flag. Inside importObjects in JS, the object that holds the data for the
import must have the same name as the AssemblyScript file importing it!