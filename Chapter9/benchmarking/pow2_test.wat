(module
    ;; original function
    (func (export "pow2")
        (param $p1 i32)
        (param $p2 i32)
        (result i32)
        local.get $p1
        i32.const 16
        i32.mul
        local.get $p2
        i32.const 8
        i32.div_u
        i32.add    
    )

    ;;wasm-opt placed div before mul, try that out
    (func (export "pow2_reverse")
        (param $p1 i32)
        (param $p2 i32)
        (result i32)
        local.get $p2
        i32.const 8
        i32.div_u
        local.get $p1
        i32.const 16
        i32.mul
        i32.add
    )

    ;; use shift for multiply, but not divide
    (func (export "pow2_mul_shift")
        (param $p1 i32)
        (param $p2 i32)
        (result i32)
        local.get $p1
        i32.const 4
        i32.shl
        local.get $p2
        i32.const 8
        i32.div_u
        i32.add    
    )

    ;; change multiply and divide to shifts, different order
    (func (export "pow2_mul_div_shift")
        (param $p1 i32)
        (param $p2 i32)
        (result i32)
        local.get $p2
        i32.const 3
        i32.shr_u
        local.get $p1
        i32.const 4
        i32.shl
        i32.add
    )

    ;; change multiplyl and divide to shift, original order
    (func (export "pow2_mul_div_nor")
        (param $p1 i32)
        (param $p2 i32)
        (result i32)
        local.get $p1
        i32.const 4
        i32.shl
        local.get $p2
        i32.const  3
        i32.shr_u
        i32.add
    )

    ;; generated by wasm-opt
    (type $t0 (func (param i32 i32) (result i32)))
    (func $pow2_mul (type $t0) (param $p0 i32) (param $p1 i32) (result i32)
        local.get $p0
        i32.const 4
        i32.shl
        local.get $p1
        i32.const 3
        i32.shr_u
        i32.add)
    (export "pow2_mul" (func $pow2_mul))
)